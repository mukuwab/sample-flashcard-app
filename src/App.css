
body{

    background-color: rgb(94, 9, 9); /*light blue background color*/
    margin: 0; /*remove default margin*/
}

/*next will create class to move cards away from the edge of the screen*/
.container{
    max-width: 900px; /*set max width of container to 900px*/
    margin: 1rem 2rem; /*add margin to the top and bottom of the container*/
}

.card-grid{
    display: grid; /*use CSS grid to layout the cards*/
    /* grid-template-columns: repeat(4, 1fr); create 4 equal columns */
    /* grid-template-rows: repeat(3, 1fr); create 3 equal rows */
    /* grid-gap: 1rem; add gap between the cards */
    align-items: center; /*center the cards vertically*/
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    /*auto-fill will create as many columns as possible based on the minmax value*/
    /*minmax(200px, 1fr) will create columns that are at least 200px wide and will grow to fill the available space*/
    /*1fr means 1 fraction of the available space*/
    gap: 1rem; /*add gap between the cards*/
}

.card {

display: flex;
justify-content: center;
align-items: center;
position: relative; /*position relative to position the front and back of the card*/
border-radius: .25rem;  /*rounded corners*/
box-shadow: 0 0 5px 2px rgba(0,0,0,.3); 
background-color: white;
transform-style: preserve-3d; /*preserve the 3D effect when rotating*/
/*height: 150px; /*height of the card | removed after implementing setMaxHeight function*/
/*width: 150px; /*width of the card- REMOVED after adding grid elements in .card:grid*/
transition: 150ms; /*animate the rotation over 150 milliseconds*/
transform: perspective(1000px) rotateY(var(--rotate-y,0)) 
translateY(var(--translate-y,0));
/* rotateY(var(--rotate-y,0)) means rotate the card on the Y axis based on the value of the --rotate-y variable */
/* perspective(1000px); add perspective to the card to give it a 3D effect */

/* translateY...  default value is 0 */
/* create a hover effect for the card */
}


.card:hover {
    transform: translate-y(-2px);/* move the card up 2 pixels on hover;*/
    box-shadow: 0 0 10px 4px rgba(0,0,0,.3); /*increase the shadow on hover*/ 
    cursor: pointer; 
}


.card.flip {

    --rotate-y: 180deg; /*rotate the card 180 degrees when flipped*/    
   
    
}

.card .front, .card .back{

    position: absolute; /*position absolute to stack the front and back on top of each other*/
    padding: 1rem; /*padding inside the card*/
    backface-visibility: hidden; /*hide the back of the card when not facing the user*/
}

.card .back {
    transform: rotateY(180deg); /*rotate the back of the card 180 degrees*/
    /*will flip the text on the back of the card*/
}

.card .front {

    left: 0; /* makes sure that the wording on the front of the card is aligned to the left */
    /* the answer on the back of the card is centered by default */

}

/*flashcard-options is the array list (the div) that contains the options for each flashcard*/
.flashcard-options {
margin-top: 0.5rem; /*add margin to the top of the options*/


}

/* reference each individual option using .flashcard-option */
.flashcard-option {
   margin-top: .25rem; /*add margin to the top of each option*/
   color: #555; /*dark gray color for the text*/
   font-size: .75rem; /*font size of the options*/
}

/*.flashcard-option:first-child references the first option in the list of options*/
.flashcard-option:first-child{
    margin-top: 0; /*remove the margin from the top of the first option*/
}